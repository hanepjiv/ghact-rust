name: CI Rust

on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always

  TEST_SETS: |
    cargo +stable test
    cargo +stable clippy -- -D clippy::all
    cargo +stable test --no-default-features
    cargo +stable clippy --no-default-features -- -D clippy::all
    cargo +stable test --all-features
    cargo +stable clippy --all-features -- -D clippy::all

    cargo +beta test
    cargo +beta clippy -- -D clippy::all
    cargo +beta test --no-default-features
    cargo +beta clippy --no-default-features -- -D clippy::all
    cargo +beta test --all-features
    cargo +beta clippy --all-features -- -D clippy::all

    cargo +nightly test
    cargo +nightly clippy -- -D clippy::all
    cargo +nightly test --no-default-features
    cargo +nightly clippy --no-default-features -- -D clippy::all
    cargo +nightly test --all-features
    cargo +nightly clippy --all-features -- -D clippy::all

jobs:
  params:
    runs-on: ubuntu-latest

    outputs:
      repos: ${{ steps.repos.outputs.ret }}

      date: ${{ steps.date.outputs.ret }}

      cache-toolchain-path: |
        ~/.cargo/
        ~/.rustup/

      cache-toolchain-key: ${{ runner.os }}-${{ runner.arch }}-toolchain-${{ steps.date.outputs.ret }}

      cache-target-path: |
        ~/.cargo/registry/index/
        ~/.cargo/registry/cache/
        ~/.cargo/git/db/
        target/

      cache-target-key: ${{ runner.os }}-${{ runner.arch }}-${{ steps.repos.outputs.ret }}-target

    steps:
      - id: repos
        run: echo "ret=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}" >> $GITHUB_OUTPUT

      - id: date
        env:
          TZ: "TZ"
        run: echo "ret=$(date +'%Y%0m%0d')" >> $GITHUB_OUTPUT

  cargo:
    runs-on: ubuntu-latest

    needs: params

    permissions:
      issues: write

    steps:
      - name: Restore cached toolchain
        id: cache-toolchain-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ needs.params.outputs.cache-toolchain-path }}
          key: ${{ needs.params.outputs.cache-toolchain-key }}

      - name: Setup Rust Toolchain
        if: steps.cache-toolchain-restore.outputs.cache-hit != 'true'
        run: |
          if ! [ -x "$(command -v rustup)" ]; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          fi

          source ~/.cargo/env

          rustup set profile minimal

          rustup install stable beta nightly

          rustup component add --toolchain stable clippy
          rustup component add --toolchain beta clippy
          rustup component add --toolchain nightly clippy

          cargo install cargo-audit

      - name: Save cached toolchain
        if: steps.cache-toolchain-restore.outputs.cache-hit != 'true'
        id: cache-toolchain-save
        uses: actions/cache/save@v4
        with:
          path: ${{ needs.params.outputs.cache-toolchain-path }}
          key: ${{ needs.params.outputs.cache-toolchain-key }}

      - uses: actions/checkout@v4

      - name: Run cargo update
        run: |
          source ~/.cargo/env
          cargo update
          cargo audit

      - name: Restore cached target
        id: cache-target-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ needs.params.outputs.cache-target-path }}
          key: ${{ needs.params.outputs.cache-target-key }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo
        run: |
          source ~/.cargo/env
          cargo +nightly update -Z minimal-versions
          echo "$TEST_SETS" | sh
          cargo update
          echo "$TEST_SETS" | sh

      - name: Save cached target
        if: steps.cache-target-restore.outputs.cache-hit != 'true'
        id: cache-target-save
        uses: actions/cache/save@v4
        with:
          path: ${{ needs.params.outputs.cache-target-path }}
          key: ${{ needs.params.outputs.cache-target-key }}-${{ hashFiles('**/Cargo.lock') }} # use new hash

      - name: Create issue when failed
        if: ${{ failure() && github.event_name == 'push' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}

          TITLE: failed workflow
          ASSIGNEES: ${{ github.actor }}
          LABELS: workflows,ci
          BODY: |
            ref_name: ${{ github.ref_name }}
            run_id: ${{ github.run_id }}
            run_number: ${{ github.run_number }}

          PINNED: true
          CLOSE_PREVIOUS: true
        run: |
          if [[ $CLOSE_PREVIOUS == true ]]; then
            previous_issue_number=$(gh issue list \
              --label "$LABELS" \
              --json number \
              --jq '.[0].number')
            if [[ -n $previous_issue_number ]]; then
              gh issue close "$previous_issue_number"
              gh issue unpin "$previous_issue_number"
            fi
          fi
          new_issue_url=$(gh issue create \
            --title "$TITLE" \
            --assignee "$ASSIGNEES" \
            --label "$LABELS" \
            --body "$BODY")
          if [[ $PINNED == true ]]; then
            gh issue pin "$new_issue_url"
          fi
