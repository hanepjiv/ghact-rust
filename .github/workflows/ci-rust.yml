# -*-coding:utf-8-unix;mode:yml-*-

#  Copyright 2024 hanepjiv
#  @author hanepjiv <hanepjiv@gmail.com>
#  @copyright The MIT License (MIT) / Apache License Version 2.0
#  @since 2024/11/09
#  @date 2024/11/12

name: CI Rust

on:
  workflow_call:
    inputs:
      apt-packages:
        description: |
          comma separated apt-packages. \'apt-get install -y -qq <package>\'
        required: false
        type: string
    secrets:
      ssh-private-keys:
        required: false

env:
  CARGO_TERM_COLOR: always

jobs:
  params:
    runs-on: ubuntu-latest

    outputs:
      test-sets: |
        cargo +stable test
        cargo +stable clippy -- -D clippy::all
        cargo +stable test --no-default-features
        cargo +stable clippy --no-default-features -- -D clippy::all
        cargo +stable test --all-features
        cargo +stable clippy --all-features -- -D clippy::all

        cargo +beta test
        cargo +beta clippy -- -D clippy::all
        cargo +beta test --no-default-features
        cargo +beta clippy --no-default-features -- -D clippy::all
        cargo +beta test --all-features
        cargo +beta clippy --all-features -- -D clippy::all

        cargo +nightly test
        cargo +nightly clippy -- -D clippy::all
        cargo +nightly test --no-default-features
        cargo +nightly clippy --no-default-features -- -D clippy::all
        cargo +nightly test --all-features
        cargo +nightly clippy --all-features -- -D clippy::all

      cache-rust-toolchain-path: |
        ~/.cargo/
        ~/.rustup/

      cache-rust-target-path: |
        ~/.cargo/registry/index/
        ~/.cargo/registry/cache/
        ~/.cargo/git/db/
        target/

      repos: ${{ steps.repos.outputs.ret }}
      date: ${{ steps.date.outputs.ret }}

      cache-rust-toolchain-key: ${{ runner.os }}-${{ runner.arch }}-rust-toolchain-${{ steps.date.outputs.ret }}
      cache-rust-target-key: ${{ runner.os }}-${{ runner.arch }}-${{ steps.repos.outputs.ret }}-rust-target

    steps:
      - id: repos
        run: echo "ret=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}" >> $GITHUB_OUTPUT

      - id: date
        env:
          TZ: "TZ"
        run: echo "ret=$(date +'%Y%0m%0d')" >> $GITHUB_OUTPUT

  cargo:
    runs-on: ubuntu-latest

    needs: params

    permissions:
      contents: read
      issues: write

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          cat <<EOF > ~/.ssh/config
          Host github.com
            User git
            Hostname github.com
          EOF
          chmod 600 ~/.ssh/config

          if [[ '' != "${{ secrets.ssh-private-keys }}" ]]; then
            IFS=, inputs=("${{ secrets.ssh-private-keys }}")
            for i in ${inputs[@]}
            do key=`echo $i | grep -v '^$'` # trim blank line
               out=~/.ssh/`echo $key | sha256sum | cut -f1 -d' '`
               echo $key > $out
               chmod 600 $out
               echo "  IdentityFile $out" >> ~/.ssh/config
            done
          fi

          eval `ssh-agent -s`

      - name: Setup git
        run: |
          cat <<EOF > ~/.gitconfig
          [credential]
          helper = cache
          EOF

      - name: Install apt-packages
        if: inputs.apt-packages != ''
        run: |
          sudo apt-get update -y -qq
          for i in {${{ inputs.apt-packages }}}; do
            sudo apt-get install -y -qq $i
          done

      - name: Restore cached Rust toolchain
        id: cache-rust-toolchain-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ needs.params.outputs.cache-rust-toolchain-path }}
          key: ${{ needs.params.outputs.cache-rust-toolchain-key }}

      - name: Setup Rust Toolchain
        if: steps.cache-rust-toolchain-restore.outputs.cache-hit != 'true'
        run: |
          if ! [[ -x "$(command -v rustup)" ]]; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | \
            sh -s -- -y
          fi

          source ~/.cargo/env

          rustup set profile minimal
          rustup install stable beta nightly
          rustup component add --toolchain stable clippy
          rustup component add --toolchain beta clippy
          rustup component add --toolchain nightly clippy

          cargo install cargo-audit

          echo "net.git-fetch-with-cli = true" >> ~/.cargo/config.toml

      - name: Save cached Rust toolchain
        if: steps.cache-rust-toolchain-restore.outputs.cache-hit != 'true'
        id: cache-rust-toolchain-save
        uses: actions/cache/save@v4
        with:
          path: ${{ needs.params.outputs.cache-rust-toolchain-path }}
          key: ${{ needs.params.outputs.cache-rust-toolchain-key }}

      - uses: actions/checkout@v4

      - name: Run cargo update
        run: |
          source ~/.cargo/env
          cargo update
          cargo audit

      - name: Restore cached Rust target
        id: cache-rust-target-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ needs.params.outputs.cache-rust-target-path }}
          key: ${{ needs.params.outputs.cache-rust-target-key }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo {test,clippy}
        run: |
          source ~/.cargo/env
          cargo +nightly update -Z direct-minimal-versions
          echo "${{ needs.params.outputs.test-sets }}" | sh
          cargo update
          echo "${{ needs.params.outputs.test-sets }}" | sh

      - name: Save cached Rust target
        if: steps.cache-rust-target-restore.outputs.cache-hit != 'true'
        id: cache-rust-target-save
        uses: actions/cache/save@v4
        with:
          path: ${{ needs.params.outputs.cache-rust-target-path }}
          key: ${{ needs.params.outputs.cache-rust-target-key }}-${{ hashFiles('**/Cargo.lock') }} # use new hash

      - name: Create issue when failed
        if: ${{ failure() && github.event_name == 'push' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}

          TITLE: failed workflow
          ASSIGNEES: ${{ github.actor }}
          LABELS: workflows,ci
          BODY: |
            ref_name: ${{ github.ref_name }}
            run_id: ${{ github.run_id }}
            run_number: ${{ github.run_number }}

          PINNED: true
          CLOSE_PREVIOUS: true
        run: |
          if [[ $CLOSE_PREVIOUS == true ]]; then
            previous_issue_number=$(gh issue list \
              --label "$LABELS" \
              --json number \
              --jq '.[0].number')
            if [[ -n $previous_issue_number ]]; then
              gh issue close "$previous_issue_number"
              gh issue unpin "$previous_issue_number"
            fi
          fi
          new_issue_url=$(gh issue create \
            --title "$TITLE" \
            --assignee "$ASSIGNEES" \
            --label "$LABELS" \
            --body "$BODY")
          if [[ $PINNED == true ]]; then
            gh issue pin "$new_issue_url"
          fi
